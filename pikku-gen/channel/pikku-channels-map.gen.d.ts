/**
 * This file was generated by the @pikku/cli
 */
/**
 * This provides the structure needed for TypeScript to be aware of channels
 */
    


// Custom types are those that are defined directly within generics
// or are broken into simpler types
export type ProgressiveEnhancementExampleOutput = { state: "initial" | "pending" | "done"; }
export type TimeSinceOpenedOutput = { count: number; }
export type RpcTestInput = { in: number; }
export type RpcCallerInput = { name: string; data: unknown; }

interface ChannelHandler<I, O> {
    input: I;
    output: O;
}

export type ChannelsMap = {
  readonly 'progressive-enhancement': {
    readonly routes: {
      readonly action: {
        readonly status: ChannelHandler<void, ProgressiveEnhancementExampleOutput>,
      },
    },
    readonly defaultMessage: never,
  },
};

export type ChannelDefaultHandlerOf<Channel extends keyof ChannelsMap> =
    ChannelsMap[Channel]['defaultMessage'] extends { input: infer I; output: infer O }
        ? ChannelHandler<I, O>
        : never;

export type ChannelWiringHandlerOf<
    Channel extends keyof ChannelsMap, 
    Route extends keyof ChannelsMap[Channel]['routes'], 
    Method extends keyof ChannelsMap[Channel]['routes'][Route],
> =
    ChannelsMap[Channel]['routes'][Route][Method] extends { input: infer I; output: infer O }
        ? ChannelHandler<I, O>
        : never;
